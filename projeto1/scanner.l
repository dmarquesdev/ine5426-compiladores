/* Inspired on https://github.com/llpilla/compiler_examples/blob/master/simple_ast/scanner.l */

%{
#include <string>
#include "syntax_tree.h"
#include "parser.h" /* Generated by Bison */

extern int yylineno;
void yyerror(const char* s, ...);
%}

%option noyywrap nodefault yylineno

integer [0-9]+
float {integer}\.{integer}*
boolean (true|false)

boolean_op_rel (==|!=|>|<|>=|<=)
boolean_op_bin (&&|\|\|)

var_name [a-zA-Z]([a-zA-Z0-9_])*
type (int|float|bool)

%%

[ \t]               ; //ignores spaces
{float}				{yyval.fval = std::atof(yytext); return T_FLOAT;}
{integer}           {yylval.ival = std::atoi(yytext); return T_INT;}
{boolean}			{yylval.bval = std::atol(yytext); return T_BOOL;}
{type}				{return T_TYPE;}
{boolean_op_rel}	{return T_BOOL_REL;}
{boolean_op_bin}	{return T_BOOL_BIN;}
\+                 	{return T_PLUS;}
\*                  {return T_TIMES;}
\-                  {return T_SUB;}
\/                  {return T_DIV;}
\n                  {return T_NL;}
\(                  {return T_OPEN_PAR;}
\)                  {return T_CLOSE_PAR;}
\=					{return T_ATTRIB;}
\,					{return T_COMMA;}
\!					{return T_NEGATION;}
{var_name}			{yylval.cval = strdup(yytext); return T_VAR_NAME;}
.                   {yyerror("Unknown token! %c\n", *yytext);} /*complains about every unknown character*/

%%

void yyerror(const char *s, ...){
    va_list ap;
    va_start(ap, s);
    std::fprintf(stderr, "Line %d: error: ", yylineno);
    std::vfprintf(stderr, s, ap);
}
